const std = @import("std");

const opcode = @import("opcode.zig");

pub const Disassembler = struct {
    const InStream = std.io.InStream(std.os.File.ReadError);
    const OutStream = std.io.OutStream(std.os.File.WriteError);

    input: *InStream,
    output: *OutStream,

    pub fn init(input: *InStream, output: *OutStream) Disassembler {
        return Disassembler{
            .input = input,
            .output = output,
        };
    }

    pub fn disassemble(self: *Disassembler) !void {
        const byte = try self.input.readByte();
        const op = @intToEnum(opcode.Opcode, byte);
        switch (op) {
            opcode.Opcode.NOP => try self.output.print("nop"),
            opcode.Opcode.LD_A_n => try self.output.print("ld a,{x}", try self.input.readByte()),
            opcode.Opcode.LD_B_n => try self.output.print("ld b,{x}", try self.input.readByte()),
            opcode.Opcode.LD_C_n => try self.output.print("ld c,{x}", try self.input.readByte()),
            opcode.Opcode.LD_D_n => try self.output.print("ld d,{x}", try self.input.readByte()),
            opcode.Opcode.LD_E_n => try self.output.print("ld e,{x}", try self.input.readByte()),
            opcode.Opcode.LD_H_n => try self.output.print("ld h,{x}", try self.input.readByte()),
            opcode.Opcode.LD_L_n => try self.output.print("ld l,{x}", try self.input.readByte()),
            opcode.Opcode.LD_A_A => try self.output.print("ld a,a"),
            opcode.Opcode.LD_A_B => try self.output.print("ld a,b"),
            opcode.Opcode.LD_A_C => try self.output.print("ld a,c"),
            opcode.Opcode.LD_A_D => try self.output.print("ld a,d"),
            opcode.Opcode.LD_A_E => try self.output.print("ld a,e"),
            opcode.Opcode.LD_A_H => try self.output.print("ld a,h"),
            opcode.Opcode.LD_A_L => try self.output.print("ld a,l"),
            opcode.Opcode.LD_A_HL => try self.output.print("ld a,(hl)"),
            opcode.Opcode.LD_B_B => try self.output.print("ld b,b"),
            opcode.Opcode.LD_B_C => try self.output.print("ld b,c"),
            opcode.Opcode.LD_B_D => try self.output.print("ld b,d"),
            opcode.Opcode.LD_B_E => try self.output.print("ld b,e"),
            opcode.Opcode.LD_B_H => try self.output.print("ld b,h"),
            opcode.Opcode.LD_B_L => try self.output.print("ld b,l"),
            opcode.Opcode.LD_B_HL => try self.output.print("ld b,(hl)"),
            opcode.Opcode.LD_C_B => try self.output.print("ld c,b"),
            opcode.Opcode.LD_C_C => try self.output.print("ld c,c"),
            opcode.Opcode.LD_C_D => try self.output.print("ld c,d"),
            opcode.Opcode.LD_C_E => try self.output.print("ld c,e"),
            opcode.Opcode.LD_C_H => try self.output.print("ld c,h"),
            opcode.Opcode.LD_C_L => try self.output.print("ld c,l"),
            opcode.Opcode.LD_C_HL => try self.output.print("ld c,(hl)"),
            opcode.Opcode.LD_D_B => try self.output.print("ld d,b"),
            opcode.Opcode.LD_D_C => try self.output.print("ld d,c"),
            opcode.Opcode.LD_D_D => try self.output.print("ld d,d"),
            opcode.Opcode.LD_D_E => try self.output.print("ld d,e"),
            opcode.Opcode.LD_D_H => try self.output.print("ld d,h"),
            opcode.Opcode.LD_D_L => try self.output.print("ld d,l"),
            opcode.Opcode.LD_D_HL => try self.output.print("ld d,(hl)"),
            opcode.Opcode.LD_E_B => try self.output.print("ld e,b"),
            opcode.Opcode.LD_E_C => try self.output.print("ld e,c"),
            opcode.Opcode.LD_E_D => try self.output.print("ld e,d"),
            opcode.Opcode.LD_E_E => try self.output.print("ld e,e"),
            opcode.Opcode.LD_E_H => try self.output.print("ld e,h"),
            opcode.Opcode.LD_E_L => try self.output.print("ld e,l"),
            opcode.Opcode.LD_E_HL => try self.output.print("ld e,(hl)"),
            opcode.Opcode.LD_H_B => try self.output.print("ld h,b"),
            opcode.Opcode.LD_H_C => try self.output.print("ld h,c"),
            opcode.Opcode.LD_H_D => try self.output.print("ld h,d"),
            opcode.Opcode.LD_H_E => try self.output.print("ld h,e"),
            opcode.Opcode.LD_H_H => try self.output.print("ld h,h"),
            opcode.Opcode.LD_H_L => try self.output.print("ld h,l"),
            opcode.Opcode.LD_H_HL => try self.output.print("ld h,(hl)"),
            opcode.Opcode.LD_L_B => try self.output.print("ld l,b"),
            opcode.Opcode.LD_L_C => try self.output.print("ld l,c"),
            opcode.Opcode.LD_L_D => try self.output.print("ld l,d"),
            opcode.Opcode.LD_L_E => try self.output.print("ld l,e"),
            opcode.Opcode.LD_L_H => try self.output.print("ld l,h"),
            opcode.Opcode.LD_L_L => try self.output.print("ld l,l"),
            opcode.Opcode.LD_L_HL => try self.output.print("ld l,(hl)"),
            opcode.Opcode.LD_HL_B => try self.output.print("ld (hl),b"),
            opcode.Opcode.LD_HL_C => try self.output.print("ld (hl),c"),
            opcode.Opcode.LD_HL_D => try self.output.print("ld (hl),d"),
            opcode.Opcode.LD_HL_E => try self.output.print("ld (hl),e"),
            opcode.Opcode.LD_HL_H => try self.output.print("ld (hl),h"),
            opcode.Opcode.LD_HL_L => try self.output.print("ld (hl),l"),
            opcode.Opcode.LD_HL_n => try self.output.print("ld (hl),{x}", try self.input.readByte()),
            opcode.Opcode.LD_A_BC => try self.output.print("ld a,(bc)"),
            opcode.Opcode.LD_A_DE => try self.output.print("ld a,(de)"),
            opcode.Opcode.LD_A_nn => try self.output.print("ld a,({x})", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_B_A => try self.output.print("ld b,a"),
            opcode.Opcode.LD_C_A => try self.output.print("ld c,a"),
            opcode.Opcode.LD_D_A => try self.output.print("ld d,a"),
            opcode.Opcode.LD_E_A => try self.output.print("ld e,a"),
            opcode.Opcode.LD_H_A => try self.output.print("ld h,a"),
            opcode.Opcode.LD_L_A => try self.output.print("ld l,a"),
            opcode.Opcode.LD_BC_A => try self.output.print("ld (bc),a"),
            opcode.Opcode.LD_DE_A => try self.output.print("ld (de),a"),
            opcode.Opcode.LD_HL_A => try self.output.print("ld (hl),a"),
            opcode.Opcode.LD_nn_A => try self.output.print("ld ({x}),a", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_A_mem_C => try self.output.print("ld a,($FF00 + c)"),
            opcode.Opcode.LD_mem_C_A => try self.output.print("ld ($FF00 + c),a"),
            opcode.Opcode.LDD_A_HL => try self.output.print("ldd a,(hl)"),
            opcode.Opcode.LDD_HL_A => try self.output.print("ldd (hl),a"),
            opcode.Opcode.LDI_A_HL => try self.output.print("ldi a,(hl)"),
            opcode.Opcode.LDI_HL_A => try self.output.print("ldi (hl),a"),
            opcode.Opcode.LDH_n_A => try self.output.print("ld {x},a", u16(0xFF00) | try self.input.readByte()),
            opcode.Opcode.LDH_A_n => try self.output.print("ld a,{x}", try self.input.readByte()),
            opcode.Opcode.LD_BC_nn => try self.output.print("ld bc,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_DE_nn => try self.output.print("ld de,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_HL_nn => try self.output.print("ld hl,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_SP_nn => try self.output.print("ld sp,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.LD_SP_HL => try self.output.print("ld sp,hl"),
            opcode.Opcode.LDHL_SP_n => try self.output.print("ld hl,sp+{x}", try self.input.readByteSigned()),
            opcode.Opcode.LD_nn_SP => try self.output.print("ld ({x}),sp", try self.input.readIntLe(u16)),
            opcode.Opcode.PUSH_AF => try self.output.print("push af"),
            opcode.Opcode.PUSH_BC => try self.output.print("push bc"),
            opcode.Opcode.PUSH_DE => try self.output.print("push de"),
            opcode.Opcode.PUSH_HL => try self.output.print("push hl"),
            opcode.Opcode.POP_AF => try self.output.print("pop af"),
            opcode.Opcode.POP_BC => try self.output.print("pop bc"),
            opcode.Opcode.POP_DE => try self.output.print("pop de"),
            opcode.Opcode.POP_HL => try self.output.print("pop hl"),
            opcode.Opcode.ADD_A_A => try self.output.print("add a,a"),
            opcode.Opcode.ADD_A_B => try self.output.print("add a,b"),
            opcode.Opcode.ADD_A_C => try self.output.print("add a,c"),
            opcode.Opcode.ADD_A_D => try self.output.print("add a,d"),
            opcode.Opcode.ADD_A_E => try self.output.print("add a,e"),
            opcode.Opcode.ADD_A_H => try self.output.print("add a,h"),
            opcode.Opcode.ADD_A_L => try self.output.print("add a,l"),
            opcode.Opcode.ADD_A_HL => try self.output.print("add a,(hl)"),
            opcode.Opcode.ADD_A_n => try self.output.print("add a,{x}", try self.input.readByte()),
            opcode.Opcode.ADC_A_A => try self.output.print("adc a,a"),
            opcode.Opcode.ADC_A_B => try self.output.print("adc a,b"),
            opcode.Opcode.ADC_A_C => try self.output.print("adc a,c"),
            opcode.Opcode.ADC_A_D => try self.output.print("adc a,d"),
            opcode.Opcode.ADC_A_E => try self.output.print("adc a,e"),
            opcode.Opcode.ADC_A_H => try self.output.print("adc a,h"),
            opcode.Opcode.ADC_A_L => try self.output.print("adc a,l"),
            opcode.Opcode.ADC_A_HL => try self.output.print("adc a,(hl)"),
            opcode.Opcode.ADC_A_n => try self.output.print("adc a,{x}", try self.input.readByte()),
            opcode.Opcode.SUB_A_A => try self.output.print("sub a,a"),
            opcode.Opcode.SUB_A_B => try self.output.print("sub a,b"),
            opcode.Opcode.SUB_A_C => try self.output.print("sub a,c"),
            opcode.Opcode.SUB_A_D => try self.output.print("sub a,d"),
            opcode.Opcode.SUB_A_E => try self.output.print("sub a,e"),
            opcode.Opcode.SUB_A_H => try self.output.print("sub a,h"),
            opcode.Opcode.SUB_A_L => try self.output.print("sub a,l"),
            opcode.Opcode.SUB_A_HL => try self.output.print("sub a,(hl)"),
            opcode.Opcode.SUB_A_n => try self.output.print("sub a,{x}", try self.input.readByte()),
            opcode.Opcode.SBC_A_A => try self.output.print("sbc a,a"),
            opcode.Opcode.SBC_A_B => try self.output.print("sbc a,b"),
            opcode.Opcode.SBC_A_C => try self.output.print("sbc a,c"),
            opcode.Opcode.SBC_A_D => try self.output.print("sbc a,d"),
            opcode.Opcode.SBC_A_E => try self.output.print("sbc a,e"),
            opcode.Opcode.SBC_A_H => try self.output.print("sbc a,h"),
            opcode.Opcode.SBC_A_L => try self.output.print("sbc a,l"),
            opcode.Opcode.SBC_A_HL => try self.output.print("sbc a,(hl)"),
            opcode.Opcode.SBC_A_n => try self.output.print("sbc a,{x}", try self.input.readByte()),
            opcode.Opcode.AND_A_A => try self.output.print("and a,a"),
            opcode.Opcode.AND_A_B => try self.output.print("and a,b"),
            opcode.Opcode.AND_A_C => try self.output.print("and a,c"),
            opcode.Opcode.AND_A_D => try self.output.print("and a,d"),
            opcode.Opcode.AND_A_E => try self.output.print("and a,e"),
            opcode.Opcode.AND_A_H => try self.output.print("and a,h"),
            opcode.Opcode.AND_A_L => try self.output.print("and a,l"),
            opcode.Opcode.AND_A_HL => try self.output.print("and a,(hl)"),
            opcode.Opcode.AND_A_n => try self.output.print("and a,{x}", try self.input.readByte()),
            opcode.Opcode.OR_A_A => try self.output.print("or a,a"),
            opcode.Opcode.OR_A_B => try self.output.print("or a,b"),
            opcode.Opcode.OR_A_C => try self.output.print("or a,c"),
            opcode.Opcode.OR_A_D => try self.output.print("or a,d"),
            opcode.Opcode.OR_A_E => try self.output.print("or a,e"),
            opcode.Opcode.OR_A_H => try self.output.print("or a,h"),
            opcode.Opcode.OR_A_L => try self.output.print("or a,l"),
            opcode.Opcode.OR_A_HL => try self.output.print("or a,(hl)"),
            opcode.Opcode.OR_A_n => try self.output.print("or a,{x}", try self.input.readByte()),
            opcode.Opcode.XOR_A_A => try self.output.print("xor a,a"),
            opcode.Opcode.XOR_A_B => try self.output.print("xor a,b"),
            opcode.Opcode.XOR_A_C => try self.output.print("xor a,c"),
            opcode.Opcode.XOR_A_D => try self.output.print("xor a,d"),
            opcode.Opcode.XOR_A_E => try self.output.print("xor a,e"),
            opcode.Opcode.XOR_A_H => try self.output.print("xor a,h"),
            opcode.Opcode.XOR_A_L => try self.output.print("xor a,l"),
            opcode.Opcode.XOR_A_HL => try self.output.print("xor a,(hl)"),
            opcode.Opcode.XOR_A_n => try self.output.print("xor a,{x}", try self.input.readByte()),
            opcode.Opcode.CP_A_A => try self.output.print("cp a,a"),
            opcode.Opcode.CP_A_B => try self.output.print("cp a,b"),
            opcode.Opcode.CP_A_C => try self.output.print("cp a,c"),
            opcode.Opcode.CP_A_D => try self.output.print("cp a,d"),
            opcode.Opcode.CP_A_E => try self.output.print("cp a,e"),
            opcode.Opcode.CP_A_H => try self.output.print("cp a,h"),
            opcode.Opcode.CP_A_L => try self.output.print("cp a,l"),
            opcode.Opcode.CP_A_HL => try self.output.print("cp a,(hl)"),
            opcode.Opcode.CP_A_n => try self.output.print("cp a,{x}", try self.input.readByte()),
            opcode.Opcode.INC_A => try self.output.print("inc a"),
            opcode.Opcode.INC_B => try self.output.print("inc b"),
            opcode.Opcode.INC_C => try self.output.print("inc c"),
            opcode.Opcode.INC_D => try self.output.print("inc d"),
            opcode.Opcode.INC_E => try self.output.print("inc e"),
            opcode.Opcode.INC_H => try self.output.print("inc h"),
            opcode.Opcode.INC_L => try self.output.print("inc l"),
            opcode.Opcode.INC_mem_HL => try self.output.print("inc (hl)"),
            opcode.Opcode.DEC_A => try self.output.print("dec a"),
            opcode.Opcode.DEC_B => try self.output.print("dec b"),
            opcode.Opcode.DEC_C => try self.output.print("dec c"),
            opcode.Opcode.DEC_D => try self.output.print("dec d"),
            opcode.Opcode.DEC_E => try self.output.print("dec e"),
            opcode.Opcode.DEC_H => try self.output.print("dec h"),
            opcode.Opcode.DEC_L => try self.output.print("dec l"),
            opcode.Opcode.DEC_mem_HL => try self.output.print("dec (hl)"),
            opcode.Opcode.ADD_HL_BC => try self.output.print("add hl,bc"),
            opcode.Opcode.ADD_HL_DE => try self.output.print("add hl,de"),
            opcode.Opcode.ADD_HL_HL => try self.output.print("add hl,hl"),
            opcode.Opcode.ADD_HL_SP => try self.output.print("add hl,sp"),
            opcode.Opcode.ADD_SP_n => try self.output.print("add hl,{x}", self.input.readByteSigned()),
            opcode.Opcode.INC_BC => try self.output.print("inc bc"),
            opcode.Opcode.INC_DE => try self.output.print("inc de"),
            opcode.Opcode.INC_HL => try self.output.print("inc hl"),
            opcode.Opcode.INC_SP => try self.output.print("inc sp"),
            opcode.Opcode.DEC_BC => try self.output.print("dec bc"),
            opcode.Opcode.DEC_DE => try self.output.print("dec de"),
            opcode.Opcode.DEC_HL => try self.output.print("dec hl"),
            opcode.Opcode.DEC_SP => try self.output.print("dec sp"),
            opcode.Opcode.DAA => try self.output.print("daa"),
            opcode.Opcode.CPL => try self.output.print("cpl"),
            opcode.Opcode.CCF => try self.output.print("ccf"),
            opcode.Opcode.SCF => try self.output.print("scf"),
            opcode.Opcode.HALT => try self.output.print("halt"),
            opcode.Opcode.STOP_FIRST_BYTE => {
                const second_byte = try self.input.readByte();
                if (second_byte != 0) {
                    unreachable;
                }
                try self.output.print("stop");
            },
            opcode.Opcode.DI => try self.output.print("di"),
            opcode.Opcode.EI => try self.output.print("ei"),
            opcode.Opcode.RLCA => try self.output.print("rlca"),
            opcode.Opcode.RLA => try self.output.print("rla"),
            opcode.Opcode.RRCA => try self.output.print("rrca"),
            opcode.Opcode.RRA => try self.output.print("rra"),
            opcode.Opcode.JP_nn => try self.output.print("jp {x}", try self.input.readIntLe(u16)),
            opcode.Opcode.JP_NZ_nn => try self.output.print("jp nz,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.JP_Z_nn => try self.output.print("jp z,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.JP_NC_nn => try self.output.print("jp nc,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.JP_C_nn => try self.output.print("jp c,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.JP_HL => try self.output.print("jp (HL)"),
            opcode.Opcode.JR_n => try self.output.print("jr {x}", try self.input.readByteSigned()),
            opcode.Opcode.JR_NZ_n => try self.output.print("jr nz,{x}", try self.input.readByteSigned()),
            opcode.Opcode.JR_Z_n => try self.output.print("jr z,{x}", try self.input.readByteSigned()),
            opcode.Opcode.JR_NC_n => try self.output.print("jr nc,{x}", try self.input.readByteSigned()),
            opcode.Opcode.JR_C_n => try self.output.print("jr c,{x}", try self.input.readByteSigned()),
            opcode.Opcode.CALL_nn => try self.output.print("call {x}", try self.input.readIntLe(u16)),
            opcode.Opcode.CALL_NZ_nn => try self.output.print("call nz,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.CALL_Z_nn => try self.output.print("call z,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.CALL_NC_nn => try self.output.print("call nc,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.CALL_C_nn => try self.output.print("call c,{x}", try self.input.readIntLe(u16)),
            opcode.Opcode.RST_00 => try self.output.print("rst 0x00"),
            opcode.Opcode.RST_08 => try self.output.print("rst 0x08"),
            opcode.Opcode.RST_10 => try self.output.print("rst 0x10"),
            opcode.Opcode.RST_18 => try self.output.print("rst 0x18"),
            opcode.Opcode.RST_20 => try self.output.print("rst 0x20"),
            opcode.Opcode.RST_28 => try self.output.print("rst 0x28"),
            opcode.Opcode.RST_30 => try self.output.print("rst 0x30"),
            opcode.Opcode.RST_38 => try self.output.print("rst 0x38"),
            opcode.Opcode.RET => try self.output.print("ret"),
            opcode.Opcode.RET_NZ => try self.output.print("ret nz"),
            opcode.Opcode.RET_Z => try self.output.print("ret z"),
            opcode.Opcode.RET_NC => try self.output.print("ret nc"),
            opcode.Opcode.RET_C => try self.output.print("ret c"),
            opcode.Opcode.RETI => try self.output.print("reti"),
            opcode.Opcode.MISC => {
                switch (@intToEnum(opcode.MiscOpcode, try self.input.readByte())) {
                    opcode.MiscOpcode.SWAP_A => try self.output.print("swap a"),
                    opcode.MiscOpcode.SWAP_B => try self.output.print("swap b"),
                    opcode.MiscOpcode.SWAP_C => try self.output.print("swap c"),
                    opcode.MiscOpcode.SWAP_D => try self.output.print("swap d"),
                    opcode.MiscOpcode.SWAP_E => try self.output.print("swap e"),
                    opcode.MiscOpcode.SWAP_H => try self.output.print("swap h"),
                    opcode.MiscOpcode.SWAP_L => try self.output.print("swap l"),
                    opcode.MiscOpcode.SWAP_HL => try self.output.print("swap (hl)"),
                    opcode.MiscOpcode.RLC_A => try self.output.print("rlc a"),
                    opcode.MiscOpcode.RLC_B => try self.output.print("rlc b"),
                    opcode.MiscOpcode.RLC_C => try self.output.print("rlc c"),
                    opcode.MiscOpcode.RLC_D => try self.output.print("rlc d"),
                    opcode.MiscOpcode.RLC_E => try self.output.print("rlc e"),
                    opcode.MiscOpcode.RLC_H => try self.output.print("rlc h"),
                    opcode.MiscOpcode.RLC_L => try self.output.print("rlc l"),
                    opcode.MiscOpcode.RLC_HL => try self.output.print("rlc (hl)"),
                    opcode.MiscOpcode.RL_A => try self.output.print("rl a"),
                    opcode.MiscOpcode.RL_B => try self.output.print("rl b"),
                    opcode.MiscOpcode.RL_C => try self.output.print("rl c"),
                    opcode.MiscOpcode.RL_D => try self.output.print("rl d"),
                    opcode.MiscOpcode.RL_E => try self.output.print("rl e"),
                    opcode.MiscOpcode.RL_H => try self.output.print("rl h"),
                    opcode.MiscOpcode.RL_L => try self.output.print("rl l"),
                    opcode.MiscOpcode.RL_HL => try self.output.print("rl (hl)"),
                    opcode.MiscOpcode.RRC_A => try self.output.print("rrc a"),
                    opcode.MiscOpcode.RRC_B => try self.output.print("rrc b"),
                    opcode.MiscOpcode.RRC_C => try self.output.print("rrc c"),
                    opcode.MiscOpcode.RRC_D => try self.output.print("rrc d"),
                    opcode.MiscOpcode.RRC_E => try self.output.print("rrc e"),
                    opcode.MiscOpcode.RRC_H => try self.output.print("rrc h"),
                    opcode.MiscOpcode.RRC_L => try self.output.print("rrc l"),
                    opcode.MiscOpcode.RRC_HL => try self.output.print("rrc (hl)"),
                    opcode.MiscOpcode.RR_A => try self.output.print("rr a"),
                    opcode.MiscOpcode.RR_B => try self.output.print("rr b"),
                    opcode.MiscOpcode.RR_C => try self.output.print("rr c"),
                    opcode.MiscOpcode.RR_D => try self.output.print("rr d"),
                    opcode.MiscOpcode.RR_E => try self.output.print("rr e"),
                    opcode.MiscOpcode.RR_H => try self.output.print("rr h"),
                    opcode.MiscOpcode.RR_L => try self.output.print("rr l"),
                    opcode.MiscOpcode.RR_HL => try self.output.print("rr (hl)"),
                    opcode.MiscOpcode.SLA_A => try self.output.print("sla a"),
                    opcode.MiscOpcode.SLA_B => try self.output.print("sla b"),
                    opcode.MiscOpcode.SLA_C => try self.output.print("sla c"),
                    opcode.MiscOpcode.SLA_D => try self.output.print("sla d"),
                    opcode.MiscOpcode.SLA_E => try self.output.print("sla e"),
                    opcode.MiscOpcode.SLA_H => try self.output.print("sla h"),
                    opcode.MiscOpcode.SLA_L => try self.output.print("sla l"),
                    opcode.MiscOpcode.SLA_HL => try self.output.print("sla (hl)"),
                    opcode.MiscOpcode.SRA_A => try self.output.print("sra a"),
                    opcode.MiscOpcode.SRA_B => try self.output.print("sra b"),
                    opcode.MiscOpcode.SRA_C => try self.output.print("sra c"),
                    opcode.MiscOpcode.SRA_D => try self.output.print("sra d"),
                    opcode.MiscOpcode.SRA_E => try self.output.print("sra e"),
                    opcode.MiscOpcode.SRA_H => try self.output.print("sra h"),
                    opcode.MiscOpcode.SRA_L => try self.output.print("sra l"),
                    opcode.MiscOpcode.SRA_HL => try self.output.print("sra (hl)"),
                    opcode.MiscOpcode.SRL_A => try self.output.print("srl a"),
                    opcode.MiscOpcode.SRL_B => try self.output.print("srl b"),
                    opcode.MiscOpcode.SRL_C => try self.output.print("srl c"),
                    opcode.MiscOpcode.SRL_D => try self.output.print("srl d"),
                    opcode.MiscOpcode.SRL_E => try self.output.print("srl e"),
                    opcode.MiscOpcode.SRL_H => try self.output.print("srl h"),
                    opcode.MiscOpcode.SRL_L => try self.output.print("srl l"),
                    opcode.MiscOpcode.SRL_HL => try self.output.print("srl (hl)"),
                    opcode.MiscOpcode.BIT_A => try self.output.print("bit {x},a", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_B => try self.output.print("bit {x},b", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_C => try self.output.print("bit {x},c", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_D => try self.output.print("bit {x},d", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_E => try self.output.print("bit {x},e", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_H => try self.output.print("bit {x},h", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_L => try self.output.print("bit {x},l", try self.input.readByte()),
                    opcode.MiscOpcode.BIT_HL => try self.output.print("bit {x},(hl)", try self.input.readByte()),
                    opcode.MiscOpcode.SET_A => try self.output.print("set {x},a", try self.input.readByte()),
                    opcode.MiscOpcode.SET_B => try self.output.print("set {x},b", try self.input.readByte()),
                    opcode.MiscOpcode.SET_C => try self.output.print("set {x},c", try self.input.readByte()),
                    opcode.MiscOpcode.SET_D => try self.output.print("set {x},d", try self.input.readByte()),
                    opcode.MiscOpcode.SET_E => try self.output.print("set {x},e", try self.input.readByte()),
                    opcode.MiscOpcode.SET_H => try self.output.print("set {x},h", try self.input.readByte()),
                    opcode.MiscOpcode.SET_L => try self.output.print("set {x},l", try self.input.readByte()),
                    opcode.MiscOpcode.SET_HL => try self.output.print("set {x},(hl)", try self.input.readByte()),
                    opcode.MiscOpcode.RES_A => try self.output.print("res {x},a", try self.input.readByte()),
                    opcode.MiscOpcode.RES_B => try self.output.print("res {x},b", try self.input.readByte()),
                    opcode.MiscOpcode.RES_C => try self.output.print("res {x},c", try self.input.readByte()),
                    opcode.MiscOpcode.RES_D => try self.output.print("res {x},d", try self.input.readByte()),
                    opcode.MiscOpcode.RES_E => try self.output.print("res {x},e", try self.input.readByte()),
                    opcode.MiscOpcode.RES_H => try self.output.print("res {x},h", try self.input.readByte()),
                    opcode.MiscOpcode.RES_L => try self.output.print("res {x},l", try self.input.readByte()),
                    opcode.MiscOpcode.RES_HL => try self.output.print("res {x},(hl)", try self.input.readByte()),
                }
            },
        }
    }
};

test "Disassembler" {
    var stdin = try std.io.getStdIn();
    var stdout = try std.io.getStdOut();
    var inStream = std.io.FileInStream.init(&stdin);
    var outStream = std.io.FileOutStream.init(&stdout);
    var disassembler = Disassembler.init(&inStream.stream, &outStream.stream);
    try disassembler.disassemble();
}
